Backport of:

From f141376ae2892b59f2b1af94204f925832f8dc3a Mon Sep 17 00:00:00 2001
From: Matt Caswell <matt@openssl.org>
Date: Mon, 5 Oct 2015 14:12:05 +0100
Subject: [PATCH] Change functions to pass in a limit rather than calculate it
MIME-Version: 1.0
Content-Type: text/plain; charset=utf8
Content-Transfer-Encoding: 8bit

Some extension handling functions were passing in a pointer to the start
of the data, plus the length in order to calculate the end, rather than
just passing in the end to start with. This change makes things a little
more readable.

Reviewed-by: Emilia KÃ¤sper <emilia@openssl.org>

Conflicts:
	ssl/s3_srvr.c
	ssl/ssl_locl.h
	ssl/t1_lib.c
---
 ssl/s3_srvr.c  |  2 +-
 ssl/ssl_locl.h |  2 +-
 ssl/t1_lib.c   | 30 +++++++++++++++---------------
 3 files changed, 17 insertions(+), 17 deletions(-)

Index: openssl-1.0.1f/ssl/s3_srvr.c
===================================================================
--- openssl-1.0.1f.orig/ssl/s3_srvr.c	2017-01-30 11:18:33.260098102 -0500
+++ openssl-1.0.1f/ssl/s3_srvr.c	2017-01-30 11:19:07.944576474 -0500
@@ -1213,7 +1213,7 @@
 	/* TLS extensions*/
 	if (s->version >= SSL3_VERSION)
 		{
-		if (!ssl_parse_clienthello_tlsext(s,&p,d,n, &al))
+		if (!ssl_parse_clienthello_tlsext(s,&p,d+n, &al))
 			{
 			/* 'al' set by ssl_parse_clienthello_tlsext */
 			SSLerr(SSL_F_SSL3_GET_CLIENT_HELLO,SSL_R_PARSE_TLSEXT);
Index: openssl-1.0.1f/ssl/ssl_locl.h
===================================================================
--- openssl-1.0.1f.orig/ssl/ssl_locl.h	2017-01-30 11:18:33.260098102 -0500
+++ openssl-1.0.1f/ssl/ssl_locl.h	2017-01-30 11:19:43.793070659 -0500
@@ -1100,7 +1100,7 @@
 #ifndef OPENSSL_NO_TLSEXT
 unsigned char *ssl_add_clienthello_tlsext(SSL *s, unsigned char *p, unsigned char *limit); 
 unsigned char *ssl_add_serverhello_tlsext(SSL *s, unsigned char *p, unsigned char *limit); 
-int ssl_parse_clienthello_tlsext(SSL *s, unsigned char **data, unsigned char *d, int n, int *al);
+int ssl_parse_clienthello_tlsext(SSL *s, unsigned char **data, unsigned char *limit, int *al);
 int ssl_parse_serverhello_tlsext(SSL *s, unsigned char **data, unsigned char *d, int n, int *al);
 int ssl_prepare_clienthello_tlsext(SSL *s);
 int ssl_prepare_serverhello_tlsext(SSL *s);
Index: openssl-1.0.1f/ssl/t1_lib.c
===================================================================
--- openssl-1.0.1f.orig/ssl/t1_lib.c	2017-01-30 11:18:33.260098102 -0500
+++ openssl-1.0.1f/ssl/t1_lib.c	2017-01-30 11:22:25.075281338 -0500
@@ -871,7 +871,7 @@
  * Sadly we cannot differentiate 10.6, 10.7 and 10.8.4 (which work), from
  * 10.8..10.8.3 (which don't work).
  */
-static void ssl_check_for_safari(SSL *s, const unsigned char *data, const unsigned char *d, int n) {
+static void ssl_check_for_safari(SSL *s, const unsigned char *data, const unsigned char *limit) {
 	unsigned short type, size;
 	static const unsigned char kSafariExtensionsBlock[] = {
 		0x00, 0x0a,  /* elliptic_curves extension */
@@ -899,11 +899,11 @@
 		0x02, 0x03,  /* SHA-1/ECDSA */
 	};
 
-	if (data >= (d+n-2))
+	if (data >= (limit-2))
 		return;
 	data += 2;
 
-	if (data > (d+n-4))
+	if (data > (limit-4))
 		return;
 	n2s(data,type);
 	n2s(data,size);
@@ -911,7 +911,7 @@
 	if (type != TLSEXT_TYPE_server_name)
 		return;
 
-	if (data+size > d+n)
+	if (data+size > limit)
 		return;
 	data += size;
 
@@ -920,7 +920,7 @@
 		const size_t len1 = sizeof(kSafariExtensionsBlock);
 		const size_t len2 = sizeof(kSafariTLS12ExtensionsBlock);
 
-		if (data + len1 + len2 != d+n)
+		if (data + len1 + len2 != limit)
 			return;
 		if (memcmp(data, kSafariExtensionsBlock, len1) != 0)
 			return;
@@ -931,7 +931,7 @@
 		{
 		const size_t len = sizeof(kSafariExtensionsBlock);
 
-		if (data + len != d+n)
+		if (data + len != limit)
 			return;
 		if (memcmp(data, kSafariExtensionsBlock, len) != 0)
 			return;
@@ -941,7 +941,7 @@
 }
 #endif /* !OPENSSL_NO_EC */
 
-int ssl_parse_clienthello_tlsext(SSL *s, unsigned char **p, unsigned char *d, int n, int *al)
+int ssl_parse_clienthello_tlsext(SSL *s, unsigned char **p, unsigned char *limit, int *al)
 	{
 	unsigned short type;
 	unsigned short size;
@@ -963,22 +963,22 @@
 
 #ifndef OPENSSL_NO_EC
 	if (s->options & SSL_OP_SAFARI_ECDHE_ECDSA_BUG)
-		ssl_check_for_safari(s, data, d, n);
+		ssl_check_for_safari(s, data, limit);
 #endif /* !OPENSSL_NO_EC */
 
-	if (data >= (d+n-2))
+	if (data >= (limit-2))
 		goto ri_check;
 	n2s(data,len);
 
-	if (data + len != d + n)
+	if (data + len != limit)
 		goto ri_check;
 
-	while (data <= (d+n-4))
+	while (data <= (limit-4))
 		{
 		n2s(data,type);
 		n2s(data,size);
 
-		if (data+size > (d+n))
+		if (data+size > (limit))
 	   		goto ri_check;
 #if 0
 		fprintf(stderr,"Received extension type %d size %d\n",type,size);
