Backport of:

From 6f35f6deb5ca7daebe289f86477e061ce3ee5f46 Mon Sep 17 00:00:00 2001
From: Matt Caswell <matt@openssl.org>
Date: Thu, 5 May 2016 11:10:26 +0100
Subject: [PATCH] Avoid some undefined pointer arithmetic

A common idiom in the codebase is:

if (p + len > limit)
{
    return; /* Too long */
}

Where "p" points to some malloc'd data of SIZE bytes and
limit == p + SIZE

"len" here could be from some externally supplied data (e.g. from a TLS
message).

The rules of C pointer arithmetic are such that "p + len" is only well
defined where len <= SIZE. Therefore the above idiom is actually
undefined behaviour.

For example this could cause problems if some malloc implementation
provides an address for "p" such that "p + len" actually overflows for
values of len that are too big and therefore p + len < limit!

Issue reported by Guido Vranken.

CVE-2016-2177

Reviewed-by: Rich Salz <rsalz@openssl.org>
---
 ssl/s3_srvr.c  | 14 +++++++-------
 ssl/ssl_sess.c |  2 +-
 ssl/t1_lib.c   | 48 ++++++++++++++++++++++++++----------------------
 3 files changed, 34 insertions(+), 30 deletions(-)

Index: openssl-1.0.1f/ssl/s3_srvr.c
===================================================================
--- openssl-1.0.1f.orig/ssl/s3_srvr.c	2017-01-30 11:23:10.675902912 -0500
+++ openssl-1.0.1f/ssl/s3_srvr.c	2017-01-30 11:25:06.797479525 -0500
@@ -984,7 +984,7 @@
 		
 		session_length = *(p + SSL3_RANDOM_SIZE);
 
-		if (p + SSL3_RANDOM_SIZE + session_length + 1 >= d + n) {
+		if (SSL3_RANDOM_SIZE + session_length + 1 >= (d + n) - p) {
 			al = SSL_AD_DECODE_ERROR;
 			SSLerr(SSL_F_SSL3_GET_CLIENT_HELLO, SSL_R_LENGTH_TOO_SHORT);
 			goto f_err;
@@ -1002,7 +1002,7 @@
 	/* get the session-id */
 	j= *(p++);
 
-	if (p + j > d + n) {
+	if ((d + n) - p < j) {
 		al = SSL_AD_DECODE_ERROR;
 		SSLerr(SSL_F_SSL3_GET_CLIENT_HELLO, SSL_R_LENGTH_TOO_SHORT);
 		goto f_err;
@@ -1046,14 +1046,14 @@
 	if (s->version == DTLS1_VERSION || s->version == DTLS1_BAD_VER)
 		{
 		/* cookie stuff */
-		if (p + 1 > d + n) {
+		if ((d + n) - p < 1) {
 			al = SSL_AD_DECODE_ERROR;
 			SSLerr(SSL_F_SSL3_GET_CLIENT_HELLO, SSL_R_LENGTH_TOO_SHORT);
 			goto f_err;
 		}
 		cookie_len = *(p++);
 
-		if (p + cookie_len > d + n) {
+		if ((d + n ) - p < cookie_len) {
 			al = SSL_AD_DECODE_ERROR;
 			SSLerr(SSL_F_SSL3_GET_CLIENT_HELLO, SSL_R_LENGTH_TOO_SHORT);
 			goto f_err;
@@ -1105,7 +1105,7 @@
 		p += cookie_len;
 		}
 
-	if (p + 2 > d + n) {
+	if ((d + n ) - p < 2) {
 		al = SSL_AD_DECODE_ERROR;
 		SSLerr(SSL_F_SSL3_GET_CLIENT_HELLO, SSL_R_LENGTH_TOO_SHORT);
 		goto f_err;
@@ -1120,7 +1120,7 @@
 		}
 
 		/* i bytes of cipher data + 1 byte for compression length later */
-		if ((p + i + 1) > (d + n))
+		if ((d + n) - p < i + 1)
 		{
 		/* not enough data */
 		al=SSL_AD_DECODE_ERROR;
@@ -1187,7 +1187,7 @@
 
 	/* compression */
 	i= *(p++);
-	if ((p+i) > (d+n))
+	if ((d + n) - p < i)
 		{
 		/* not enough data */
 		al=SSL_AD_DECODE_ERROR;
Index: openssl-1.0.1f/ssl/t1_lib.c
===================================================================
--- openssl-1.0.1f.orig/ssl/t1_lib.c	2017-01-30 11:23:10.675902912 -0500
+++ openssl-1.0.1f/ssl/t1_lib.c	2017-01-30 11:36:15.086404473 -0500
@@ -899,11 +899,11 @@
 		0x02, 0x03,  /* SHA-1/ECDSA */
 	};
 
-	if (data >= (limit-2))
+	if (limit - data <= 2)
 		return;
 	data += 2;
 
-	if (data > (limit-4))
+	if (limit - data < 4)
 		return;
 	n2s(data,type);
 	n2s(data,size);
@@ -911,7 +911,7 @@
 	if (type != TLSEXT_TYPE_server_name)
 		return;
 
-	if (data+size > limit)
+	if (limit - data < size)
 		return;
 	data += size;
 
@@ -920,7 +920,7 @@
 		const size_t len1 = sizeof(kSafariExtensionsBlock);
 		const size_t len2 = sizeof(kSafariTLS12ExtensionsBlock);
 
-		if (data + len1 + len2 != limit)
+		if (limit - data != (int)(len1 + len2))
 			return;
 		if (memcmp(data, kSafariExtensionsBlock, len1) != 0)
 			return;
@@ -931,7 +931,7 @@
 		{
 		const size_t len = sizeof(kSafariExtensionsBlock);
 
-		if (data + len != limit)
+		if (limit - data != (int)(len))
 			return;
 		if (memcmp(data, kSafariExtensionsBlock, len) != 0)
 			return;
@@ -966,19 +966,19 @@
 		ssl_check_for_safari(s, data, limit);
 #endif /* !OPENSSL_NO_EC */
 
-	if (data >= (limit-2))
+	if (limit - data <= 2)
 		goto ri_check;
 	n2s(data,len);
 
-	if (data + len != limit)
+	if (limit - data != len)
 		goto ri_check;
 
-	while (data <= (limit-4))
+	while (limit - data >= 4)
 		{
 		n2s(data,type);
 		n2s(data,size);
 
-		if (data+size > (limit))
+		if (limit - data < size)
 	   		goto ri_check;
 #if 0
 		fprintf(stderr,"Received extension type %d size %d\n",type,size);
@@ -1493,22 +1493,22 @@
 	                       SSL_TLSEXT_HB_DONT_SEND_REQUESTS);
 #endif
 
-	if (data >= (d+n-2))
+	if ((d + n) - data <= 2)
 		goto ri_check;
 
 	n2s(data,length);
-	if (data+length != d+n)
+	if ((d + n) - data != length)
 		{
 		*al = SSL_AD_DECODE_ERROR;
 		return 0;
 		}
 
-	while(data <= (d+n-4))
+	while ((d + n) - data >= 4)
 		{
 		n2s(data,type);
 		n2s(data,size);
 
-		if (data+size > (d+n))
+		if ((d + n) - data < size)
 	   		goto ri_check;
 
 		if (s->tlsext_debug_cb)
@@ -2196,30 +2196,34 @@
 	if (s->version == DTLS1_VERSION || s->version == DTLS1_BAD_VER)
 		{
 		i = *(p++);
-		p+= i;
-		if (p >= limit)
+
+		if (limit - p <= i)
 			return -1;
+
+		p += i;
 		}
 	/* Skip past cipher list */
 	n2s(p, i);
-	p+= i;
-	if (p >= limit)
+	if (limit - p <= i)
 		return -1;
+	p+= i;
+
 	/* Skip past compression algorithm list */
 	i = *(p++);
-	p += i;
-	if (p > limit)
+	if (limit - p < i)
 		return -1;
+	p += i;
+
 	/* Now at start of extensions */
-	if ((p + 2) >= limit)
+	if (limit - p <= 2)
 		return 0;
 	n2s(p, i);
-	while ((p + 4) <= limit)
+	while (limit - p >= 4)
 		{
 		unsigned short type, size;
 		n2s(p, type);
 		n2s(p, size);
-		if (p + size > limit)
+		if (limit - p < size)
 			return 0;
 		if (type == TLSEXT_TYPE_session_ticket)
 			{
